syntax = "proto3";

package claidservice;

option go_package = "claid.ethz.ch/claidservice";

option java_package = "adamma.c4dhi.claid";
option java_outer_classname = "ClaidJavaService";
option java_multiple_files = true;


import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// Service for modules to talk to the CLAID middleware.
service ClaidService {
  // Continuous stream of DataPackage's between client and server.
  rpc SendReceivePackages(stream DataPackage) returns (stream DataPackage) {}

  // Get the modules to set up during initialization.
  rpc GetModuleList(ModuleListRequest) returns (ModuleListResponse) {}

  // Init Modules
  rpc InitRuntime(InitRuntimeRequest) returns (google.protobuf.Empty) {}
}

// Service for two instances of the CLAID middleware to talk to each other over a TCP connection.
service ClaidRemoteService
{
  // Continuous stream of DataPackage's between remote client and remote server.
  rpc SendReceivePackages(stream DataPackage) returns (stream DataPackage) {}

  // Registers the client (identified by user_token and device_id) with the server.
  // rpc RegisterRemoteClient(RemoteClientInitRequest) returns (google.protobuf.Empty) {}
}

message DataPackage {
  string id = 1;      // Unique ID of this package
  string channel = 2;
  string source_module = 3; // originating module id
  string target_module = 4; // target module id
  string source_host = 5; // originating host name
  string target_host = 6; // target host name
  string source_user_token = 7;  // id token of the user / system entity that created this package.
  string target_user_token = 8; // id of the user / system that this package is intended for, if it is intended to send data to a module of a specific user.
                                // typically, this will be *, meaning that the package will be forwarded to all users that run the corresponding host.
  string device_id = 9;    // unique ID for this device / host, e.g. MAC id
  repeated TracePoint trace_points = 10;
  uint64 unix_timestamp_ms = 11; // unix timestamp in milliseconds of when the package was created

  // Blob stores a payload in binary representation alongside a corresponding header.
  
  Blob payload = 12;
  ControlPackage control_val = 13;
}

enum CtrlType {
  CTRL_UNSPECIFIED      = 0;
  CTRL_RUNTIME_PING     = 1;  // Client sends this upon connect and periodically if no packages have been sent
  CTRL_REMOTE_PING      = 2;  // RemoteClient sends this upon connect to a RemoteDispatcherServer upon connect.
  CTRL_REMOTE_PING_PONG = 3;  // Response to a CTRL_REMOTE_PING.
  CTRL_CONN_CANCEL      = 4;  // Signal by the client that it is about to cancel the request.
  // CTRL_MODULE_READY  = 5;  // sent to module when the local middleware is ready
  // CTRL_STATUS        = 6;  // Sent from a middleware client up the tree
  // CTRL_ACTION        = 7;  // sent to module when the local middleware is ready
  CTRL_ERROR            = 8;  // Error occured
  CTRL_CONNECTED_TO_REMOTE_SERVER       = 9; // If RemoteDispatcherClient connected to a Server
  CTRL_DISCONNECTED_FROM_REMOTE_SERVER  = 10;
  CTRL_UNLOAD_MODULES                   = 11;
  CTRL_UNLOAD_MODULES_DONE              = 12;
  CTRL_RESTART_RUNTIME                  = 13; 
  CTRL_RESTART_RUNTIME_DONE             = 14;
  CTRL_STOP_RUNTIME                     = 15; // Stops a runtime.
  CTRL_REQUEST_MODULE_ANNOTATIONS       = 16;
  CTRL_REQUEST_MODULE_ANNOTATIONS_RESPONSE            = 17;
  CTRL_UPLOAD_CONFIG_AND_DATA                         = 18; // Will be received by the middleware (not forwarded to the Runtimes). Can be used to load a new config into a host alongside with additional data (model files, python code to inject etc.). Requires designer_mode in CLAIDConfig to be true.
  CTRL_ON_NEW_CONFIG_PAYLOAD_DATA                     = 19; // Will be sent by the middleware to all local Runtimes after the Middleware received a package of type CTRL_UPLOAD_CONFIG_AND_DATA. Informs the Runtimes that new payloads are available.
  CTRL_LOCAL_LOG_MESSAGE                              = 20; // Can be used by the individual runtimes connected to the middleware to forward log messages to the middleware, which might forward it to the log sink host.
  CTRL_LOG_SINK_LOG_MESSAGE_STREAM                    = 21; // Can be used by CLAID instances to stream log messages to the log sink host. Might be send out by the middleware when a CTRL_LOCAL_LOG_MESSAGE was received by any local runtime.
  CTRL_SUBSCRIBE_TO_LOG_SINK_LOG_MESSAGE_STREAM       = 22; // Can be used by local Runtimes to subscribe to the log sink log messages stream. Only works if the current host is the log sink host.
  CTRL_UNSUBSCRIBE_FROM_LOG_SINK_LOG_MESSAGE_STREAM   = 23; // Can be used by local Runtimes to unsubscribe from the log sink log messages stream. 
  CTRL_PAUSE_MODULE                                   = 24; // Can be used by local Runtimes to pause Modules running on the same host.
  CTRL_UNPAUSE_MODULE                                 = 25; // Can be used by local Runtimes to unpause Modules running on the same host.
  CTRL_ADJUST_POWER_PROFILE                           = 26; // Can be used by local Runtimes to change the PowerProfile of Modules running on the same host. Only works if a Module supports power profiles.
  CTRL_ACTIVATE_NETWORK_CONNECTIONS                   = 27; // Can be used to activate network connections after they have been activated by CTRL_DEACTIVATE_NETWORK_CONNECTIONS.
  CTRL_DEACTIVATE_NETWORK_CONNECTIONS                 = 28; // Can be used to deactivate all RemoteDispatcherClient and Servers, i.e., cutting all external connections.
  CTRL_REMOTE_FUNCTION_REQUEST                        = 29; // Can be used to execute a remote function (RPC call, e.g., a registered function of a Module).
  CTRL_REMOTE_FUNCTION_RESPONSE                       = 30; // Response to a remote function request (upon successful or unsuccessful execution of a remote function), if function has return type, this type might be contained in payload of DataPackage

  //CTRL_ADD_MODULE                         = 11; // Can be used to add a new Module at runtime (requires Module name, properties, channels). This package will be forwarded by the LocalRouter to the Middleware that can handle this Module.
  //CTRL_REMOVE_MODULE                      = 12; // Can be used to remove a Module at runtime.
  //CTRL_ADD_MODULE_SUCCESS                 = 13; // Sent as response to CTRL_ADD_MODULE the Module was added successfully.
  //CTRL_REMOVE_MODULE_SUCCESS              = 14; // Sent as response to CTRL_REMOVE_MODULE the Module was removed successfully.
  //CTRL_ADD_MODULE_FAILURE                           = 15; // Sent as response to CTRL_ADD_MODULE the Module could not be added.
  //CTRL_REMOVE_MODULE_FAILURE                        = 16; // Sent as response to CTRL_REMOVE_MODULE the Module could not be removed.
  //CTRL_PAUSE_ALL_RUNTIMES                           = 17; // Can be used to pause all runtimes (the ModuleManager of each Runtme will pause the RunnableDispatcher of all its Modules).
  //CTRL_UNPAUSE_ALL_RUNTIMES                         = 18; // Can be used to unpause all runtimes (the ModuleManager of each Runtime will unpause the RunnableDispatcher of all its Modules).

}

// Note for Stephan: I removed the "optional" labels, as protoc did complain about them:
// "Explicit 'optional' labels are disallowed in the Proto3 syntax. To define 'optional' fields in Proto3, simply remove the 'optional' label, as fields are 'optional' by default.

message ControlPackage {
  CtrlType ctrl_type                        = 1;
  Runtime runtime                           = 2; // CTRL_RUNTIME_PING, CTRL_ADD_MODULE, CTRL_REMOVE_MODULE, CTRL_ADD_MODULE_SUCCESS, CTRL_REMOVE_MODULE_SUCCESS
  RemoteClientInfo remote_client_info       = 3; // CTRL_REMOTE_PING
  AccumulatedStatus status                  = 4; // CTRL_STATUS: status sent towards root server
  ErrorMsg error_msg                        = 5; // CTRL_ERROR: Error report sent towards root server
  ActionRequest action_request              = 6; // CTRL_ACTION: action request sent to all children of the claid instance
  map<string, ModuleAnnotation> module_annotations = 7; // CTRL_REQUEST_MODULE_ANNOTATIONS_RESPONSE
  ConfigUploadPayload config_upload_payload        = 8; // CTRL_UPLOAD_CONFIG_AND_DATA and CTRL_ON_NEW_CONFIG_PAYLOAD_DATA
  LogMessage log_message                           = 9; // CTRL_LOCAL_LOG_MESSAGE and CTRL_LOG_MESSAGE_STREAM_TO_LOG_SINK
  PowerProfile power_profile                       = 10; // CTRL_ADJUST_POWER_PROFILE, can be used to tell Modules to enter power saving mode.
  RemoteFunctionRequest remote_function_request    = 11; // CTRL_REMOTE_FUNCTION_REQUEST
  RemoteFunctionReturn remote_function_return      = 12; // CTRL_REMOTE_FUNCTION_RESPONSE
}

message AccumulatedStatus {
  // TBD
}

message ErrorMsg {
  string message = 1;
  bool cancel = 2;
}

// enum ErrorLevel {
//   ERR_LEVEL_UNSPECIFIED = 0;
//   ERR_LEVEL_WARNING = 1;
//   ERR_LEVEL_FATAL = 2;
// }

message ActionRequest {
  // TBD
  map<string, string> action_params = 1;
}

message NumberVal
{
  double val = 1;
}

message NumberArray {
  repeated double val = 1;
}

message BoolVal 
{
  bool val = 1;
}

message StringVal
{
  string val = 1;
}

message StringArray {
  repeated string val = 1;
}

message NumberMap {
  map<string, double> val = 1;
}

message StringMap {
  map<string, string> val = 1;
}

message Blob {
  Codec codec = 1;

  // The byte blob containing the payload data.
  bytes payload = 2;


  // type and subtype contains meta information to decode the bytes contained above.
  // See this list of common mime types
  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
  //
  string message_type = 3;  // protobuf type (to decode payload)
  //string sub_type = 4;      // subtype, etc.
}

enum Codec {
  CODEC_UNSPECIFIED = 0;
  CODEC_BYTES       = 1;   // Just a bytes blob (no-op codec)
  CODEC_FILE        = 2;    // File blob
  CODEC_JSON        = 3;    // JSON data (maybe decode)
  CODEC_PROTO       = 4;   // Decode based on registry
}

message TracePoint {
 google.protobuf.Timestamp time_stamp = 1;
 string node_id = 2;  // full module id:  host_id:module_type
}

// Sent by the client (Runtime) to tell the Middleware which Modules it supports.
// The Middleware will answer with a ModuleListResponse, which contains the Modules
// that the Middleware wants the runtime client to load.
message ModuleListRequest {
  Runtime runtime = 1;
  repeated string supported_module_classes = 2;
  map<string, ModuleAnnotation> module_annotations = 3;
}

// List of modules that the runtime client is expected to instantiate.
message ModuleListResponse {
  message ModuleDescriptor {
    string module_id = 1;
    string module_class = 2;
    google.protobuf.Struct properties = 3;
    // repeated DataPackage channels = 4;
  }

  repeated ModuleDescriptor descriptors = 1;
  LogMessageSeverityLevel log_severity_level_for_host = 2;
}

// Sent by the client after the modules have been instantiated
// to inform the server what channels will be sent.
message InitRuntimeRequest {
  message ModuleChannels {
    string module_id = 1;
    repeated DataPackage channel_packets = 2; // channel, source | target, payload => define the channel
  }

  Runtime runtime = 1;
  repeated ModuleChannels modules = 2;
}

message RemoteClientInfo
{
  string host = 1;
  string user_token = 2;
  string device_id = 3;
}

// Used by CTRL_REMOVE_MODULE to remove a Module at Runtime.
message RemoveModuleRequest
{
  string module_id = 1;
}

// message AppConfig {
//   repeated HostConfig hosts = 1;
// }

// message HostConfig {
//   string host_id = 1;
//   repeated ModuleConfig modules = 2;
// }

// message ModuleConfig {
//   string mod_id = 1;
//   string mod_type = 2;
//   repeated string in_channels = 3;
//   repeated string out_channels = 4;
//   map<string, string> properties = 5;
// }

enum PropertyType
{
  PROPERTY_TYPE_DEFAULT = 0; // property type not further specified (i.e., input text in the CLAID designer).
  PROPERTY_TYPE_ENUM = 1;
  PROPERTY_TYPE_INT = 2;
  PROPERTY_TYPE_PATH = 3;
};

message PropertyHint
{
  PropertyType property_type = 1;
  repeated string property_type_enum_values = 2; // If the property type is ENUM, then property_type_enum_values contains the possible names of enum values.
  int64 property_type_int_min = 3; // If the property type is INT, then property_type_int_min indicates the minimum supported value for that property.
  int64 property_type_int_max = 4; // If the property type is INT, then property_type_int_max indicates the maximum supported value for that property.

};

message ModuleAnnotation
{
  string module_description  = 1;
  string module_category = 2;
  repeated string properties = 3;
  repeated string property_descriptions = 4;
  repeated PropertyHint property_hints = 5;
  repeated DataPackage channel_definition = 6;
  repeated string channel_description = 7;
  bool is_injectable = 8;
  
  repeated string file_dependencies = 9;
}


enum Runtime {
  RUNTIME_UNSPECIFIED = 0;
  RUNTIME_CPP = 1;
  RUNTIME_DART = 2;
  RUNTIME_JAVA = 3;
  RUNTIME_PYTHON = 4;
}

enum LogMessageSeverityLevel
{
  DEBUG_VERBOSE = 0;
  INFO = 1;
  WARNING = 2;
  ERROR = 3;
  FATAL = 4;
}

enum LogMessageEntityType
{
  MIDDLEWARE = 0; // For general messages, i.e., sent from low level middleware functions
  MIDDLEWARE_COMPONENT = 1; // For messages from certain well-defined components within the middleware, e.g., the Router oder RemoteDispatcher
  MODULE = 2; // For log messages directly sent from a certain Module
}

message LogMessage
{
  string log_message = 1;
  LogMessageSeverityLevel severity_level = 2;
  uint64 unix_timestamp_in_ms = 3;
  LogMessageEntityType entity_type = 4;
  string entity_name = 5;
  Runtime runtime = 6; // Runtime from which the message was sent
}


// Determines how log messages shall be transfered to the log sink host
// STORE_AND_UPLOAD is the default option. Log messages will be written to files (one file per hour),
// which will be synchronized with the log sync host once it is available.
// STREAM is an option that can be used if hosts shall livestream their log messages to the log sink host.
// This allows to stream the logs in realtime to the log sink host, however log messages will get lost if there currently is no connection to the log sink host
enum LogSinkTransferMode
{
  STORE_AND_UPLOAD = 0;
  STREAM = 1;
}


// ======= CONFIG =======


// Container for the central CLAID config file. 
// TODO (patrick): change as you see fit, this just a starting point. 
message CLAIDConfig {
  repeated HostConfig hosts = 1; 
  string log_sink_host = 2; // If specified, all CLAID instances will forward their log messages to this host. 
  LogMessageSeverityLevel log_sink_severity_level = 3;  // If log_sink_host is specified, this flag indicates 
                                                        // what category of log messages will be sent to the log sink (only messages with severity level >= this flag will be sent).
  LogSinkTransferMode log_sink_transfer_mode = 4; // Method of transfering log messages to the log_sink_host. Check LogSingTransferMode definition for more details.
  string log_sink_log_storage_path = 5; // If tranfer mode is store and upload, then this path indicates where to store the temporary files.
  //bool designer_mode = 5;                         // If true, other hosts can upload a new config (alongside additional data like model files or python code) to the host.
}

message HostConfig {
  string hostname = 1; 
  string type = 2;
  bool is_server = 3;
  string host_server_address = 4; // If is_server, then this identifies the address of the server. Must be fully specified.
  string connect_to = 5; // If specified, the host will connect to this address. 
                                  // The host can either be a Client connection to a Server, or a Server connecting to another Server.
  repeated ModuleConfig modules = 6;
  string log_folder = 7;  // Path to folder where to store log message to. All log messages with a severity level >= min_log_severity_level will be store there.
                          // Additionally, all log messages with a severity level >= log_sink_severity_level will be stored separately and synced with the log sink host.
                          // The separately stored messages for the log_sink_host will be deleted upon successfull synchronization;
  LogMessageSeverityLevel min_log_severity_level = 8; // Specifies the minimum severity level a log message needs to have in order to be printed and stored to log files.
}

message ModuleConfig
{
  string id = 1; 
  string type = 2;
  map<string, string> input_channels = 3; // Maps input channels to connections, e.g. "InputAudioDataChannel" : "AudioDataConnection"
  map<string, string> output_channels = 4; // Maps output channels to connections, e.g. "AudioDataToProcess" : "AudioDataConnection"
  google.protobuf.Struct properties = 5;
}

message DataFile
{
  string relative_path = 1;
  bytes file_data = 2;
}

message ModuleInjectionDescription
{
  string module_name = 1; // Names of modules to inject.
  string module_file = 2; // Name of the file in which the Module can be found. 
  Runtime runtime = 3; // Runtime which shall inject this module.
}

message ConfigUploadPayload
{
  CLAIDConfig config = 1;
  repeated DataFile payload_files = 2;

  // Contains names of Modules which were sent as payload and can be injected by the corresponding Runtimes.
  repeated ModuleInjectionDescription modules_to_inject = 3; 
  string payload_data_path = 4; // Current payloadDataPath (path where the middleware stores payloads).
}

// Can be used by Modules to support different Power Profiles. For example, the AccelerometerCollector might support sampling at lower frequencies to reduce battery consumption
message PowerProfile
{
  PowerProfileType power_profile_type = 1;

  // FREQUENCY AND PERIOD ARE EXCLUSIVE, USE EITHER ONE OR THE OTHER! IT WILL NOT BE VALIDATED WHETHERE period == 1/frequency !!
  double frequency = 2; // For Modules that collect data at a certain rate (e.g., AccelerometerCollector). Allows to specify an alternative threshold for when the battery is low. 
  double period = 3; // For Modules that collect data in a certain intervall. 
  map<string, string> additional_information = 4;
}

enum PowerProfileType
{
  UNRESTRICTED = 0; // Default profile
  POWER_SAVING_MODE = 2; // Power saving profile
}

message PowerSavingStrategy
{
  float battery_threshold = 1;
  repeated string active_modules = 2;
  repeated string paused_modules = 3;
  map<string, PowerProfile> power_profiles = 4;
  bool wake_lock = 5;
  bool disable_network_connections = 6;
  bool disable_wifi_and_bluetooth = 7; // Only on Android or WearOS with advanced device management active.
}

message PowerSavingStrategyList
{
    repeated PowerSavingStrategy strategies = 1;
}

// Used by claid::AnyProtoType 
message CLAIDANY
{

}

message RemoteFunctionIdentifier
{
  string function_name = 1;
  // Is it a function of a Runtime (e.g., of the C++ or Java runtime)?
  // Or is it a function of a Module?
  oneof function_type 
  {
    Runtime runtime = 2;
    string module_id = 3;
  }
}



message RemoteFunctionRequest
{
  RemoteFunctionIdentifier remote_function_identifier = 1;
  string remote_future_identifier = 2; // Unique identifier for the future which is waiting for the response of the function.
  repeated Blob parameter_payloads = 3;
}

enum RemoteFunctionStatus
{
  UNDEFINED                                       = 0;
  STATUS_OK                                       = 1;
  FAILED_FUNCTION_NOT_FOUND_OR_FAILED_TO_EXECUTE  = 2;
  FAILED_INVALID_NUMBER_OF_PARAMETERS             = 3;
  FAILED_MISMATCHING_PARAMETERS                   = 4;
  FAILED_MODULE_NOT_FOUND                         = 5;
  REMOTE_FUNCTION_REQUEST_INVALID                 = 6;
}

message RemoteFunctionReturn
{
  RemoteFunctionStatus execution_status = 1;
  RemoteFunctionIdentifier remote_function_identifier = 2;
  string remote_future_identifier = 3; // Unique identifier for the future which is waiting for the response of the function.
}