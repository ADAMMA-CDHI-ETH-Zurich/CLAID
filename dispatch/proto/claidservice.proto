syntax = "proto3";

package claidservice;

option go_package = "claid.ethz.ch/claidservice";

import "google/protobuf/timestamp.proto";

// Service for modules to talk to the CLAID middleware.
service ClaidService {
  // Continuous stream of DataPackage's between client and server. 
  rpc SendReceivePackages(stream DataPackage) returns (stream DataPackage) {}

  // Get the modules to set up during initialization.
  rpc GetModuleList(ModuleListRequest) returns (ModuleListResponse) {}
}

message DataPackage {
  string id = 1;     // Unique ID of this package 
  string source_host_module = 2; // originating module in the format host_id:module_id
  string target_host_module = 3; // target module in the format host_id:module_id
  string source_user_token = 4;  // id token of the user / system entity that created this package. 
  string target_user_token = 5; // id of the user / system that this package is intended for, if it is intended to send data to a module of a specific user.  
                                // typically, this will be *, meaning that the package will be forwarded to all users that run the corresponding host.
  string device_id = 6;    // unique ID for this device / host, e.g. MAC id
  repeated TracePoint trace_points = 7;

  // To add another message type add it below.
  oneof payload_oneof {
    ControlPackage control_val = 30; 
    double number_val = 31;
    string string_val = 32;
    bool bool_val = 33; 
    NumberArray number_array_val = 34;
    StringArray string_array_val = 35;
    NumberMap number_map = 36;
    StringMap string_map = 37; 
    Blob blob_val = 38;
  }
}

enum CtrlType {
  CTRL_UNSPECIFIED  = 0;
  CTRL_MODULE_PING  = 1;  // module ping sent to local claid server. 
  CTRL_MODULE_INIT  = 2;  // sent by module to advertise its readyness and i/o channels
  CTRL_MODULE_READY = 3;  // sent to module when the local middleware is ready 
  CTRL_STATUS       = 4;  // Sent from a middleware client up the tree 
  CTRL_ACTION       = 5;  // sent to module when the local middleware is ready 
  CTRL_ERROR        = 6;  // Error occured   
}

message ControlPackage {
  CtrlType ctrl_type                    = 1;
  optional ChannelMap channel_map       = 2; // CTRL_MODULE_INIT: list of input/output channels
  optional AccumulatedStatus status     = 3; // CTRL_STATUS: status sent towards root server 
  optional ErrorMsg error_msg           = 4; // CTRL_ERROR: Error report sent towards root server
  optional ActionRequest action_request = 5; // CTRL_ACTION: action request sent to all children 
                                             // of the claid instance
}

message ChannelMap {
  repeated DataPackage input_channels = 1; 
  repeated DataPackage output_channels = 2;
}

message AccumulatedStatus {
  // TBD 
}

message ErrorMsg {
  string message = 1;
}

message ActionRequest {
  // TBD
  map<string, string> action_params = 1;
}

message NumberArray {
  repeated double val = 1; 
}

message StringArray {
  repeated string val = 1; 
}

message NumberMap {
  map<string, double> val = 1;
}

message StringMap {
  map<string, string> val = 1; 
}

message Blob {
  // The byte blob containing the payload data. 
  bytes payload = 1;

  string name = 2;  // local name of the blob (e.g. file name)

  // type and subtype contains meta information to decode the bytes contained above. 
  // See this list of common mime types
  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
  // 
  string type = 3;      // mime type, protobuf type (to decode payload)
  string sub_type = 4;  // mime subtype, etc. 
}

enum Codec {
  CODEC_UNSPECIFIED = 0;
  CODEC_BYTES       = 1;   // Just a bytes blob (no-op codec)
  CODEC_FILE        = 2;    // File blob 
  CODEC_JSON        = 3;    // JSON data (maybe decode)
  CODEC_PROTO       = 4;   // Decode based on registry
}

message TracePoint {
 google.protobuf.Timestamp time_stamp = 1;
 string node_id = 2;  // full module id:  host_id:module_type
}

message ModuleListRequest {
  Runtime runtime = 1; 
}

message ModuleListResponse {
  repeated ModuleDescriptor descriptors = 1;
}

message ModuleDescriptor {
  string module_id = 1; 
  string params = 2;  
}

enum Runtime {
  RUNTIME_UNSPECIFIED = 0;
  RUNTIME_CPP = 1;
  RUNTIME_DART = 2; 
  RUNTIME_JAVA = 3;
  RUNTIME_PYTHON = 4;
}