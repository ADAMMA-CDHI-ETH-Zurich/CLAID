package(default_visibility = ["//visibility:public"])


cc_binary(name = "claidcmd",
    srcs=["claidcmd.cc"],
    deps = [":capi"]
)

cc_binary(
    name = "claid_capi",
    linkshared = True,
    srcs = [
        ":capi",
    ],
    deps = [
        ":capi",
        "//dispatch/proto:claidservice_cc_proto",
        "//dispatch/proto:claidservice_cc_grpc",
    ],
)

cc_library(
    name = "capi",
    srcs = glob([
        "capi.cc",
        "middleware.cc",
        "DataCollection/**/*.cc",
        "DeviceScheduler/**/*.cc",
        "EventTracker/**/*.cc",
        "RemoteFunction/**/*.cc",
        "CLAID.cc"]),
    hdrs = glob([
        "capi.h",
        "middleware.hh",
        "DataCollection/**/*.hh",
        "DeviceScheduler/**/*.hh",
        "EventTracker/**/*.hh",
        "RemoteFunction/**/*.hh",
        "CLAID.hh"]),
    deps = [
        ":CLAID",
         "//dispatch/proto:claidservice_cc_proto",
        "//dispatch/proto:claidservice_cc_grpc",
    ],
    linkstatic = True,   # only create a static lib
    alwayslink = True,   # include everything in dependents
)

cc_library(
    name = "data_collection",
    srcs = glob([
        "DataCollection/**/*.cc",]),
    hdrs = glob([
        "DataCollection/**/*.hh"]),
    deps = [
        ":CLAID",
    ],
    linkstatic = True,   # only create a static lib
    alwayslink = True,   # include everything in dependents
)

cc_library(
    name = "CLAID",
    srcs = glob([
        "Router/*.cc",
        "Exception/*.cc",
        "ExceptionHandler/*.cc",
        "RemoteDispatching/*.cc",
    ]),
    hdrs = glob([
        "Router/*.hh",
        "Exception/*.hh",
        "ExceptionHandler/*.hh",
    ]),
    deps = [
        ":claid_config",
        ":local_dispatching",
        ":logger",
        ":proto_util",
        ":remote_dispatching",
        ":cpp_modules",
        "@com_google_protobuf//:protobuf",
    ],


)




cc_library(
    name="cpp_modules",
    srcs = glob([
        "Module/**/*.cc",
        "Traits/*.cc",
        "Utilities/**/*.cc",
        "Exception/**/*.cc",
        "EventTracker/**/*.cc",
        "RemoteFunction/**/*.cc",
    ]),
    hdrs = glob([
        "Module/**/*.hh",
        "Traits/**/*.hh",
        "Utilities/**/*.hh",
        "shared_queue.hh",
        "module_table.hh",
        "Exception/**/*.hh",
        "EventTracker/**/*.hh",
        "RemoteFunction/**/*.hh",
    ]),
    deps = [
        ":proto_util",
        ":logger",
        ":local_dispatching",
    ],
   

)

cc_library(
    name = "local_dispatching",
    srcs = glob([
        "local_dispatching.cc",
        "DeviceScheduler/**/*.cc",
        "Module/TypeMapping/**/*.cc",
        "RemoteFunction/**/*.cc",
    ]),
    hdrs = glob([
        "shared_queue.hh",
        "local_dispatching.hh",
        "DeviceScheduler/**/*.hh",
        "Module/TypeMapping/**/*.hh",
        "RemoteFunction/**/*.hh",
        "Traits/**/*.hh",
    ]),
    deps = [
        ":module_table",
        ":logger",
        ":proto_util",
        "@com_github_grpc_grpc//:grpc++",
        "//dispatch/proto:claidservice_cc_proto",
        "//dispatch/proto:claidservice_cc_grpc",
    ],

)

cc_library(
    name = "remote_dispatching",
    srcs = glob([
        "RemoteDispatching/*.cc",
        "Utilities/**/*.cc",
    ]),
    hdrs = glob([
        "RemoteDispatching/*.hh",
        "Utilities/**/*.hh",
        ] + [
        "shared_queue.hh",
    ]),
    deps = [
        ":routing",
        "@com_github_grpc_grpc//:grpc++",
        "//dispatch/proto:claidservice_cc_proto",
        "//dispatch/proto:claidservice_cc_grpc",
    ],

)

cc_library(
    name = "routing",
    srcs = glob([
            "Router/*.cc",
        ] +  [
            "RemoteDispatching/HostUserTable.cc",
            "RemoteDispatching/ClientTable.cc",
        ]),
    hdrs = glob([
        "Router/*.hh",
        ] + [
        "RemoteDispatching/HostUserTable.hh",
        "RemoteDispatching/ClientTable.hh",
        "RemoteDispatching/RemoteClientKey.hh",
        "RemoteDispatching/TLSClientKeyStore.hh",
        "RemoteDispatching/TLSServerKeyStore.hh",
    ]),
    deps = [
        ":claid_config",
        ":logger",
        ":module_table",
        ":proto_util",
        "//dispatch/proto:claidservice_cc_proto",
        "//dispatch/proto:claidservice_cc_grpc",
    ],


)


cc_library(
    name = "claid_config",
    srcs = glob(["Configuration/*.cc"]),
    hdrs = glob([
        "Configuration/*.hh",
        "RemoteDispatching/TLSClientKeyStore.hh",
        "RemoteDispatching/TLSServerKeyStore.hh"
    ]),
    deps = [
        "//dispatch/proto:claidservice_cc_proto",
        "@com_google_protobuf//:protobuf",
        ":logger",
    ],

)

cc_library(
    name = "module_table",
    srcs = [
        "module_table.cc",
        "shared_queue.hh",
    ],
    hdrs = ["module_table.hh"],
    deps = [
        ":logger",
        ":proto_util",
        "@com_github_grpc_grpc//:grpc++",
        "//dispatch/proto:claidservice_cc_proto",
        "//dispatch/proto:claidservice_cc_grpc",
    ],


)

cc_library(
    name = "logger",
    srcs = glob(["Logger/*.cc", "Utilities/*.cc", "shared_queue.hh"]),
    hdrs = glob(["Logger/*.hh", "Utilities/*.hh", "shared_queue.cc"]),
    deps = [
        "//dispatch/proto:claidservice_cc_proto",
        "//dispatch/proto:claidservice_cc_grpc"
    ],
  

)

cc_library(
    name = "proto_util",
    srcs = ["proto_util.cc"],
    hdrs = ["proto_util.hh"],
    deps = [
        "@com_google_protobuf//:protobuf",
        "//dispatch/proto:claidservice_cc_proto",
        "//dispatch/proto:claidservice_cc_grpc"
    ],
    linkstatic = True,   # only create a static lib
    alwayslink = True,   # include everything in dependents

)
