package(default_visibility = ["//visibility:public"])





cc_library(
    name = "android_claid_cc",
    srcs = ["java_capi.cpp"],
    deps = ["//dispatch/core:capi"],
    alwayslink = True,   # include everything in dependents
    linkstatic = True,
    linkopts =["-landroid", "-llog", "-lm", "-ldl"]
)

cc_library(
    name = "android_claid_cc_tflite",
    srcs = ["java_capi.cpp"],
    deps = ["//dispatch/core:capi",
            "//dispatch/tensorflow:tflite"],
    alwayslink = True,   # include everything in dependents
    linkstatic = True,
    linkopts =["-landroid", "-llog", "-lm", "-ldl"]
)

android_library(
    name = "android_claid_sources",
    srcs = glob(["platform/adamma/**/*.java"]),
    deps = [
        "//dispatch/proto:claidservice_java_proto", 
        "//dispatch/java:claid_java",
        "@com_google_protobuf//:protobuf_java",]
)

# We use the android_binary target to build an Apk, from 
# which we can extract the shared libraries. We do not actually need this app,
# we just use this target to build the Apk, which we can unzip to get the claid shared libraries
# for different Android platforms.
# Would be cooler if we could build directly an AAR or so, which includes the libs.
# However this is not yet possible with bazel (but might be in the future): https://github.com/bazelbuild/bazel/issues/348

# Note: The name of the output shared libraries extracted from the apk will be libclaid_capi_android.so
android_binary(
    name = "claid_capi_android",
    deps = [":android_claid_cc"],
    manifest = "aar/claid/app/src/main/AndroidManifest.xml",
)

android_binary(
    name = "claid_capi_android_tflite",
    deps = [":android_claid_cc_tflite"],
    manifest = "aar/claid/app/src/main/AndroidManifest.xml",
)
