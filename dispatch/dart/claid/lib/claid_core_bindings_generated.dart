// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `../../core/capi.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class ClaidCoreBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ClaidCoreBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ClaidCoreBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> start_core(
    ffi.Pointer<ffi.Char> socket_path,
    ffi.Pointer<ffi.Char> config_file,
    ffi.Pointer<ffi.Char> host_id,
    ffi.Pointer<ffi.Char> user_id,
    ffi.Pointer<ffi.Char> device_id,
  ) {
    return _start_core(
      socket_path,
      config_file,
      host_id,
      user_id,
      device_id,
    );
  }

  late final _start_corePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('start_core');
  late final _start_core = _start_corePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void shutdown_core(
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _shutdown_core(
      handle,
    );
  }

  late final _shutdown_corePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'shutdown_core');
  late final _shutdown_core =
      _shutdown_corePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> get_socket_path(
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _get_socket_path(
      handle,
    );
  }

  late final _get_socket_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>)>>('get_socket_path');
  late final _get_socket_path = _get_socket_pathPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> attach_cpp_runtime(
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _attach_cpp_runtime(
      handle,
    );
  }

  late final _attach_cpp_runtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('attach_cpp_runtime');
  late final _attach_cpp_runtime = _attach_cpp_runtimePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  int load_new_config(
    ffi.Pointer<ffi.Void> handle,
    ffi.Pointer<ffi.Char> config_file,
  ) {
    return _load_new_config(
      handle,
      config_file,
    );
  }

  late final _load_new_configPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('load_new_config');
  late final _load_new_config = _load_new_configPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();
}
